import telebot
from telebot import types
import json
import schedule
import time
import threading
import logging

TOKEN = '7264109335:AAFKWF8IampwKf2WspdOgu1WcD0umRtLJrg'
data_file = 'tasks.json'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class TaskBot:
    def __init__(self, token, data_file):
        self.bot = telebot.TeleBot(token)
        self.data_file = data_file
        self.tasks = self.load_tasks()
        self.reminders = {}

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.start_command(message)

        @self.bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ")
        def add_task(message):
            self.add_task_command(message)

        @self.bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–ª–∞")
        def show_tasks(message):
            self.show_tasks_command(message)

        @self.bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ")
        def delete_task(message):
            self.delete_task_command(message)

        @self.bot.message_handler(func=lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–æ")
        def edit_task(message):
            self.edit_task_command(message)

        @self.bot.message_handler(func=lambda message: message.text == "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        def sort_tasks(message):
            self.sort_tasks_command(message)

        @self.bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–æ–º–Ω–∏—Ç—å")
        def set_reminder(message):
            self.set_reminder_command(message)

        @self.bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–µ–ª–∞")
        def clear_tasks(message):
            self.clear_tasks_command(message)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=self.run_scheduler)
        scheduler_thread.daemon = True
        scheduler_thread.start()

        self.bot.polling()

    def start_command(self, message):
        self.bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! üòâ")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ"))
        markup.add(types.KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–ª–∞"))
        markup.add(types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ"))
        markup.add(types.KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–æ"))
        markup.add(types.KeyboardButton("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏"))
        markup.add(types.KeyboardButton("–ù–∞–ø–æ–º–Ω–∏—Ç—å"))
        markup.add(types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–µ–ª–∞"))
        self.bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

    def add_task_command(self, message):
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –¥–µ–ª–æ:")
        self.bot.register_next_step_handler(message, self.get_task_time)

    def get_task_time(self, message):
        user_id = message.from_user.id
        task = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=markup)
        self.bot.register_next_step_handler(message, self.save_task, task)

    def save_task(self, message, task):
        user_id = message.from_user.id
        time_str = message.text
        if time_str.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            time_str = ''
        else:
            try:
                hour, minute = map(int, time_str.split(':'))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    time_str = f"{hour:02d}:{minute:02d}"
                else:
                    self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
                    self.get_task_time(message)
                    return
            except ValueError:
                self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
                self.get_task_time(message)
                return

        if user_id in self.tasks:
            self.tasks[user_id].append({'task': task, 'time': time_str})
        else:
            self.tasks[user_id] = [{'task': task, 'time': time_str}]
        try:
            with open(self.data_file, 'w') as f:
                json.dump(self.tasks, f)
            self.bot.send_message(message.chat.id, "–î–µ–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üëç")
            self.start_command(message)  # –í–µ—Ä–Ω–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        except json.JSONDecodeError:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.start_command(message)  # –í–µ—Ä–Ω–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        except Exception as e:
            self.bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            self.start_command(message)  # –í–µ—Ä–Ω–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    def show_tasks_command(self, message):
        user_id = message.from_user.id
        if user_id in self.tasks and self.tasks[user_id]:
            task_list = []
            for i, item in enumerate(self.tasks[user_id]):
                time_str = item.get('time', '')
                if time_str:
                    task_list.append(f"{i+1}. {item['task']} ({time_str})")
                else:
                    task_list.append(f"{i+1}. {item['task']}")
            self.bot.send_message(message.chat.id, f"–í–∞—à–∏ –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{'\n'.join(task_list)}")
        else:
            self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª.")

    def delete_task_command(self, message):
        user_id = message.from_user.id
        if user_id in self.tasks and self.tasks[user_id]:
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
            self.bot.register_next_step_handler(message, self.process_delete_task)
        else:
            self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª.")

    def process_delete_task(self, message):
        user_id = message.from_user.id
        try:
            task_index = int(message.text) - 1
            if 0 <= task_index < len(self.tasks[user_id]):
                deleted_task = self.tasks[user_id].pop(task_index)
                try:
                    with open(self.data_file, 'w') as f:
                        json.dump(self.tasks, f)
                    self.bot.send_message(message.chat.id, f"–î–µ–ª–æ '{deleted_task['task']}' —É–¥–∞–ª–µ–Ω–æ.")
                    self.start_command(message)
                except json.JSONDecodeError:
                    self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    self.start_command(message)
                except Exception as e:
                    self.bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                    self.start_command(message)
            else:
                self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞.")
                self.start_command(message)
        except ValueError:
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
            self.start_command(message)

    def edit_task_command(self, message):
        user_id = message.from_user.id
        if user_id in self.tasks and self.tasks[user_id]:
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
            self.bot.register_next_step_handler(message, self.process_edit_task)
        else:
            self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª.")

    def process_edit_task(self, message):
        user_id = message.from_user.id
        try:
            task_index = int(message.text) - 1
            if 0 <= task_index < len(self.tasks[user_id]):
                self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–µ–ª–∞:")
                self.bot.register_next_step_handler(message, self.update_task, user_id, task_index)
            else:
                self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞.")
                self.start_command(message)
        except ValueError:
            self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞ —Ü–∏—Ñ—Ä–∞–º–∏.")
            self.start_command(message)

    def update_task(self, message, user_id, task_index):
        new_task = message.text
        self.tasks[user_id][task_index]['task'] = new_task
        try:
            with open(self.data_file, 'w') as f:
                json.dump(self.tasks, f)
            self.bot.send_message(message.chat.id, "–î–µ–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! üëç")
            self.start_command(message)
        except json.JSONDecodeError:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.start_command(message)
        except Exception as e:
            self.bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            self.start_command(message)

    def sort_tasks_command(self, message):
        user_id = message.from_user.id
        if user_id in self.tasks and self.tasks[user_id]:
            sorted_tasks = sorted(self.tasks[user_id], key=lambda item: item.get('time', '23:59'))
            self.tasks[user_id] = sorted_tasks
            try:
                with open(self.data_file, 'w') as f:
                    json.dump(self.tasks, f)
                self.bot.send_message(message.chat.id, "–î–µ–ª–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏! üëç")
                self.start_command(message)
            except json.JSONDecodeError:
                self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                self.start_command(message)
            except Exception as e:
                self.bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                self.start_command(message)
        else:
            self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª.")
            self.start_command(message)

    def set_reminder_command(self, message):
        user_id = message.from_user.id
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–µ–ª–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:")
        self.bot.register_next_step_handler(message, self.get_reminder_task)
    def get_reminder_task(self, message):
        user_id = message.from_user.id
        task = message.text
        self.bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):")
        self.bot.register_next_step_handler(message, self.get_reminder_time, task)

    def get_reminder_time(self, message, task):
        user_id = message.from_user.id
        try:
            reminder_time = message.text.split(':')
            hour = int(reminder_time[0])
            minute = int(reminder_time[1])
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                schedule.every().day.at(message.text).do(self.send_reminder, user_id, task)
                self.reminders[user_id] = self.reminders.get(user_id, []) + [(task, message.text)]
                self.bot.send_message(message.chat.id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ '{task}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {message.text}.")
                self.start_command(message)
            else:
                self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
                self.start_command(message)
        except ValueError:
            self.bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
            self.start_command(message)

    def send_reminder(self, user_id, task):
        self.bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task}")

    def clear_tasks_command(self, message):
        user_id = message.from_user.id
        if user_id in self.tasks:
            self.tasks[user_id] = []
            self.save_tasks()
            self.bot.send_message(message.chat.id, "–í—Å–µ –¥–µ–ª–∞ —É–¥–∞–ª–µ–Ω—ã! üëç")
            self.start_command(message)
        else:
            self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª.")
            self.start_command(message)

    def run_scheduler(self):
        while True:
            schedule.run_pending()
            time.sleep(1)

    def load_tasks(self):
        try:
            with open(self.data_file, 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            logging.info("–§–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
            return {}
        except json.JSONDecodeError:
            logging.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
            return {}
        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

    def save_tasks(self):
        try:
            with open(self.data_file, 'w') as f:
                json.dump(self.tasks, f)
        except json.JSONDecodeError:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

if __name__ == '__main__':
    bot = TaskBot(TOKEN, data_file)
#'7264109335:AAFKWF8IampwKf2WspdOgu1WcD0umRtLJrg'